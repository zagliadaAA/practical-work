// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "medicalCenter/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MedRepo is an autogenerated mock type for the medRepo type
type MedRepo struct {
	mock.Mock
}

type MedRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MedRepo) EXPECT() *MedRepo_Expecter {
	return &MedRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: medicalReport
func (_m *MedRepo) Create(medicalReport *domain.MedicalReport) (*domain.MedicalReport, error) {
	ret := _m.Called(medicalReport)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.MedicalReport
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.MedicalReport) (*domain.MedicalReport, error)); ok {
		return rf(medicalReport)
	}
	if rf, ok := ret.Get(0).(func(*domain.MedicalReport) *domain.MedicalReport); ok {
		r0 = rf(medicalReport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MedicalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.MedicalReport) error); ok {
		r1 = rf(medicalReport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MedRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MedRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - medicalReport *domain.MedicalReport
func (_e *MedRepo_Expecter) Create(medicalReport interface{}) *MedRepo_Create_Call {
	return &MedRepo_Create_Call{Call: _e.mock.On("Create", medicalReport)}
}

func (_c *MedRepo_Create_Call) Run(run func(medicalReport *domain.MedicalReport)) *MedRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.MedicalReport))
	})
	return _c
}

func (_c *MedRepo_Create_Call) Return(_a0 *domain.MedicalReport, _a1 error) *MedRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MedRepo_Create_Call) RunAndReturn(run func(*domain.MedicalReport) (*domain.MedicalReport, error)) *MedRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MedRepo) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MedRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MedRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MedRepo_Expecter) Delete(id interface{}) *MedRepo_Delete_Call {
	return &MedRepo_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MedRepo_Delete_Call) Run(run func(id int)) *MedRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MedRepo_Delete_Call) Return(_a0 error) *MedRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MedRepo_Delete_Call) RunAndReturn(run func(int) error) *MedRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetReportByID provides a mock function with given fields: clientID
func (_m *MedRepo) GetReportByID(clientID int) (*domain.MedicalReport, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetReportByID")
	}

	var r0 *domain.MedicalReport
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.MedicalReport, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.MedicalReport); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MedicalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MedRepo_GetReportByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReportByID'
type MedRepo_GetReportByID_Call struct {
	*mock.Call
}

// GetReportByID is a helper method to define mock.On call
//   - clientID int
func (_e *MedRepo_Expecter) GetReportByID(clientID interface{}) *MedRepo_GetReportByID_Call {
	return &MedRepo_GetReportByID_Call{Call: _e.mock.On("GetReportByID", clientID)}
}

func (_c *MedRepo_GetReportByID_Call) Run(run func(clientID int)) *MedRepo_GetReportByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MedRepo_GetReportByID_Call) Return(_a0 *domain.MedicalReport, _a1 error) *MedRepo_GetReportByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MedRepo_GetReportByID_Call) RunAndReturn(run func(int) (*domain.MedicalReport, error)) *MedRepo_GetReportByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: medicalReport
func (_m *MedRepo) Update(medicalReport *domain.MedicalReport) (*domain.MedicalReport, error) {
	ret := _m.Called(medicalReport)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.MedicalReport
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.MedicalReport) (*domain.MedicalReport, error)); ok {
		return rf(medicalReport)
	}
	if rf, ok := ret.Get(0).(func(*domain.MedicalReport) *domain.MedicalReport); ok {
		r0 = rf(medicalReport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MedicalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.MedicalReport) error); ok {
		r1 = rf(medicalReport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MedRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MedRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - medicalReport *domain.MedicalReport
func (_e *MedRepo_Expecter) Update(medicalReport interface{}) *MedRepo_Update_Call {
	return &MedRepo_Update_Call{Call: _e.mock.On("Update", medicalReport)}
}

func (_c *MedRepo_Update_Call) Run(run func(medicalReport *domain.MedicalReport)) *MedRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.MedicalReport))
	})
	return _c
}

func (_c *MedRepo_Update_Call) Return(_a0 *domain.MedicalReport, _a1 error) *MedRepo_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MedRepo_Update_Call) RunAndReturn(run func(*domain.MedicalReport) (*domain.MedicalReport, error)) *MedRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMedRepo creates a new instance of MedRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMedRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MedRepo {
	mock := &MedRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
